********** Column setting, width change, different ratios: before **********

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 0.dp)
            ) {
                listOf("SNO", "TIME", "Data Packet").forEach { header ->
                    Text(header,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center,
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f)
                            .border(
                                width = 1.dp,
                                color = Color.Gray,
                                shape = RectangleShape
                            )
                            .background(
                                color = Color.Yellow,
                                shape = RectangleShape
                            ),
                        maxLines = 1,
                        overflow = TextOverflow.Clip,
                        color = Color.Black
                    )
                }
            }
            LazyColumn(
                state = listState, // Attach LazyListState to LazyColumn
                modifier = Modifier
                    .fillMaxWidth()
//                    .weight(1f) // Allow the table to take up available space

                    .padding(top = 0.dp),
            ) {

                // Table Rows
                items(tableData) { rowData ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.Center
                    ) {
                        rowData.forEach { cellData ->
                            Text(
                                cellData,
                                textAlign = TextAlign.Center,
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .weight(1f)
                                    .border(
                                        width = 1.dp,
                                        color = Color.Gray,
                                        shape = RectangleShape
                                    )
                                    .background(
                                        color = Color.Green,
                                        shape = RectangleShape
                                    ),
                                maxLines = 1,
//                                overflow = TextOverflow.Clip,
                                color = Color.Black

                            )
                        }
                    }
                }
            }

********** Column setting, width change, different ratios: After **********

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 0.dp)
            ) {
                // Define weights for each column
                listOf(
                    Pair("SNO", 0.2f),        // 20%
                    Pair("TIME", 0.3f),       // 30%
                    Pair("Data Packet", 0.5f) // 50%
                ).forEach { (header, weight) ->
                    Text(
                        text = header,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center,
                        modifier = Modifier
                            .weight(weight) // Use the defined weight for column width
                            .border(
                                width = 1.dp,
                                color = Color.Gray,
                                shape = RectangleShape
                            )
                            .background(
                                color = Color.Yellow,
                                shape = RectangleShape
                            ),
                        maxLines = 1,
                        overflow = TextOverflow.Clip,
                        color = Color.Black
                    )
                }
            }
            LazyColumn(
                state = listState, // Attach LazyListState to LazyColumn
                modifier = Modifier
                    .fillMaxWidth()
//                    .weight(1f) // Allow the table to take up available space

                    .padding(top = 0.dp),
            ) {

                // Table Rows
                items(tableData) { rowData ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.Center
                    ) {
                        rowData.forEachIndexed { index, cellData ->
                            // Use the same weights as the header row
                            val weight = when (index) {
                                0 -> 0.2f // SNO
                                1 -> 0.3f // TIME
                                2 -> 0.5f // Data Packet
                                else -> 1f // Default weight for unexpected data
                            }
                            Text(
                                text = cellData,
                                textAlign = TextAlign.Center,
                                modifier = Modifier
                                    .weight(weight) // Use the defined weight for column width
                                    .border(
                                        width = 1.dp,
                                        color = Color.Gray,
                                        shape = RectangleShape
                                    )
                                    .background(
                                        color = Color.Green,
                                        shape = RectangleShape
                                    ),
                                maxLines = 1,
                                color = Color.Black
                            )
                        }
                    }
                }
            }

******************** table before the change *************************
Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 0.dp)
            ) {
                Column(
                    modifier = Modifier.fillMaxSize()
                ) {
                    listOf("Panel Voltage(V)", "Panel Current(A)", "Battery Voltage(V)", "Battery Current(A)", "Grid Current(A)", "Load Current(A)").forEach { header ->
                        Text(header,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier
                                .fillMaxWidth()
                                .weight(1f)
                                .border(
                                    width = 1.dp,
                                    color = Color.Gray,
                                    shape = RectangleShape
                                )
                                .background(
                                    color = Color.Yellow,
                                    shape = RectangleShape
                                ),
                            maxLines = 1,
                            overflow = TextOverflow.Clip,
                            color = Color.Black
                        )
                    }
                }
            }
            LazyColumn(
                state = listState, // Attach LazyListState to LazyColumn
                modifier = Modifier
                    .fillMaxWidth()
//                    .weight(1f) // Allow the table to take up available space

                    .padding(top = 0.dp),
            ) {

                // Table Rows
                items(tableData) { rowData ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.Center
                    ) {
                        rowData.forEach { cellData ->
                            Text(
                                cellData,
                                textAlign = TextAlign.Center,
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .weight(1f)
                                    .border(
                                        width = 1.dp,
                                        color = Color.Gray,
                                        shape = RectangleShape
                                    )
                                    .background(
                                        color = Color.Green,
                                        shape = RectangleShape
                                    ),
                                maxLines = 1,
//                                overflow = TextOverflow.Clip,
                                color = Color.Black

                            )
                        }
                    }
                }
            }


******************** LaunchedEffect Codebase (06/02/2025) ****************************

        var index = 0
//        index = if (tableData.isNotEmpty()) {
//            tableData.last()[0].toInt() + 1
//        } else {
//            1
//        }


        val buffer = ByteArray(1024) // Adjust buffer size as necessary
        val collectedData = mutableListOf<List<Float>>() // To collect data for a single row
        coroutineScope.launch(Dispatchers.IO){
            while (isReading && bluetoothSocket?.isConnected == true) {

                try {
                    val sendHexValue = hexToByteArray(quickHexValues[index])
                    if(index == 6){
                        index = 0
                    } else {
                        index += 1;
                    }

                    bluetoothSocket.outputStream?.write(sendHexValue)
                    bluetoothSocket.outputStream?.flush()
                    delay(200) // Short delay after writing


                    val bytesAvailable = bluetoothSocket.inputStream?.available() ?: 0
                    if (bytesAvailable > 0) {
                        val bytesRead = bluetoothSocket.inputStream?.read(buffer) ?: 0
                        if (bytesRead > 0) {
//                    val receivedMessage = String(buffer, 0, bytesRead)
//                        .replace("\u0000", "0") // Replace null character (0x00) with "0"
//                        .trim()
//                    val hexValue = buffer.take(bytesRead).joinToString("") { "%02X".format(it) }
                            val receivedBytes = buffer.copyOf(bytesRead) // Extract only the received bytes

                      val timestamp = SimpleDateFormat("d/M/yy HH:mm:ss", Locale.getDefault())
                        .format(System.currentTimeMillis())

                            //For Panel Voltage (31)
                            if(buffer[2] == 0x32.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                            Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[0] = convertToFloat(lastByteConvert)
                            Log.i("HexRead", "TableScreen: panelVolt check, DATA: ${collectedDataMap[0]}")
                            }

                            //For Panel Current (32)
                            else if(buffer[2] == 0x33.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                            Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[1] = convertToFloat(lastByteConvert)
                            Log.i("HexRead", "TableScreen: panelCurr check, DATA: ${collectedDataMap[1]}")
                            }

                            //For Battery Voltage (33)
                            else if(buffer[2] == 0x34.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[2] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: BatteryVolt check, DATA: ${collectedDataMap[2]}")
                            }

                            //For Battery Current (34)
                            else if(buffer[2] == 0x35.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[3] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: BatteryCurr check, DATA: ${collectedDataMap[3]}")
                            }

                            //For Load Current (35)
                            else if(buffer[2] == 0x36.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[4] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: LoadCurr check, DATA: ${collectedDataMap[4]}")
                            }

                            //For Grid Current (36)
                            else if(buffer[2] == 0x37.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[5] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: gridCurr check, DATA: ${collectedDataMap[5]}")
                            }

                            else if(buffer[2] == 0x38.toByte()){
                                val bitString = bytesToBits(buffer.sliceArray(3..4))
//                                Log.i("Bits Read", "TableScreen: Bits: $bitString")

                                panelVoltStat = getBitAtIndex(bitString, 2) == '1'
                                panelCapacityStat = getBitAtIndex(bitString, 3) == '1'
                                gridChargingStat = getBitAtIndex(bitString, 4) == '1'
                                batteryStat = getBitAtIndex(bitString, 5) == '1'
                                loadDetectStat = getBitAtIndex(bitString, 6) == '1'
                                loadShortStat = getBitAtIndex(bitString, 7) == '1'
                                chargingCVModeStat = getBitAtIndex(bitString, 12) == '1'
                                chargingCCModeStat = getBitAtIndex(bitString, 13) == '1'
                                loadStat = getBitAtIndex(bitString, 15) == '1'

                            }

                            if(collectedDataMap.size == 6){
                                // Adding each float as its own single-element list
                                for (i in 0 until 6) {
                                    collectedData.add(listOf(collectedDataMap[i] ?: 0.0F))
                                }
                                Log.i("CollectData", "CollectDataMap to CollectData transfer: $collectedData, Size: ${collectedData.size}")
                            }


                            if (collectedData.size == 6) { // Once all 6 pieces are collected

                                withContext(Dispatchers.Main) {
//                                    Log.i("TableUpdate", "TableScreen: Table Updated!")
// Extract the minute from the timestamp
                                    val currentMinute = Calendar.getInstance().get(Calendar.MINUTE)

                                    // Check if tableData is not empty and compare minutes
                                    val lastRowMinute = tableData.lastOrNull()?.get(0)?.let { lastTimestamp ->
                                        try {
                                            val lastDate = dateFormat.parse(lastTimestamp)
                                            val calendar = Calendar.getInstance().apply {
                                                if (lastDate != null) {
                                                    time = lastDate
                                                }
                                            }
                                            calendar.get(Calendar.MINUTE)
                                        } catch (e: Exception) {
                                            null
                                        }
                                    }
                                    if (lastRowMinute == null || currentMinute != lastRowMinute) {
                                        // Add a new row only if the minute has changed
                                        tableData.add(listOf(timestamp) + collectedData.flatten().map { it.toString() })
                                    }



//                                    Log.i("TableData", "TableData changed: $tableData")
                                    showTableData.clear()
                                    showTableData.addAll(collectedData.flatten().map { it.toString() })
                                    Log.i("showTableData", "showTableData changed: $showTableData")
                                    collectedDataMap.clear()

                                    collectedData.clear() // Clear for the next row
                                }
                            }
                        }
                    }

                    delay(100) // Slight delay to prevent overloading the thread
                } catch (e: IOException){
                    Log.e("Bluetooth", "Error reading from socket: ${e.message}")
                }
            }
        }


****************************************************************************************************
**********************  DataTableForClassicBluetooth( 18/03/2025 )  ********************************
****************************************************************************************************

package com.example.bleconnect


import android.annotation.SuppressLint
import android.app.Activity
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.net.Uri
import android.util.Log
import android.widget.Toast
import androidx.activity.compose.BackHandler
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.material3.DrawerDefaults.standardContainerColor
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.IOException
import java.io.OutputStreamWriter
import java.text.SimpleDateFormat
import java.util.Locale

@Composable
fun TableScreen(device: BluetoothDevice, bluetoothSocket: BluetoothSocket?, onBack: () -> Unit, activity: Activity) {
    val tableData = remember {
        mutableStateListOf<List<String>>().apply {
            addAll(loadTableFromFile(activity,device))
        }
    }

    var panelVoltStat by remember { mutableStateOf(false) }
    var panelCapacityStat by remember { mutableStateOf(false) }
    var gridChargingStat by remember { mutableStateOf(false) }
    var batteryStat by remember { mutableStateOf(false) }
    var loadDetectStat by remember { mutableStateOf(false) }
    var loadShortStat by remember { mutableStateOf(false) }
    var chargingCVModeStat by remember { mutableStateOf(false) }
    var chargingCCModeStat by remember { mutableStateOf(false) }
    var loadStat by remember { mutableStateOf(false) }

    val showTableData = remember { mutableStateListOf("0.0", "0.0", "0.0", "0.0", "0.0", "0.0") }

    // Using a map to store values at specific indices
    val collectedDataMap = mutableMapOf<Int, Float>()

    var isReading = remember { (true) }


    fun onSaveComplete(){

        tableData.clear()
        panelVoltStat = false
        panelCapacityStat = false
        gridChargingStat = false
        batteryStat = false
        loadDetectStat = false
        loadShortStat = false
        chargingCCModeStat = false
        chargingCVModeStat = false
        loadStat = false
    }


    val saveFileLauncher = rememberLauncherForActivityResult(ActivityResultContracts.CreateDocument()) { uri ->
        uri?.let {
            saveDataToFile(
                uri,
                generateTableData(tableData),
                activity,
                device
            ) { onSaveComplete() }
        }
    }

    fun bytesToBits(byteArray: ByteArray): String {
        return byteArray.joinToString("") { byte ->
            String.format("%8s", Integer.toBinaryString(byte.toInt() and 0xFF)).replace(' ', '0')
        }
    }

    fun getBitAtIndex(bitString: String, index: Int): Char? {
        return if (index in bitString.indices) bitString[index] else null
    }

    fun convertLastTwoBytesToDecimal(bytes: ByteArray): Int {
        if (bytes.size < 2) return 0
        val lastTwo = bytes.takeLast(2)
        return (lastTwo[0].toInt() and 0xFF shl 8) or (lastTwo[1].toInt() and 0xFF)
    }

    fun convertToFloat(value: Int): Float {
        val divisor = 10.0f
        return value / divisor
    }

    val coroutineScope = rememberCoroutineScope()

    val quickHexValues = listOf(
//        "AB BB 31 00 00",
        "AB BB 32 00 00",
        "AB BB 33 00 00",
        "AB BB 34 00 00",
        "AB BB 35 00 00",
        "AB BB 36 00 00",
        "AB BB 37 00 00",
        "AB BB 38 00 00",
//        "AB BB 39 00 00",
//        "AB BB 3A 00 00",
//        "AB BB 3B 00 00",
//        "AB BB 3C 00 00",
    ) // Static hex values

    BackHandler {
        // Do nothing when the back button is pressed
    }


    LaunchedEffect(bluetoothSocket) {

        // Coroutine to read data from BluetoothSocket
        coroutineScope.launch(Dispatchers.IO){
            var index = 0
            val buffer = ByteArray(1024) // Adjust buffer size as necessary
            val collectedData = mutableListOf<List<Float>>() // To collect data for a single row
            while (isReading && bluetoothSocket?.isConnected == true) {

                try {
                    val sendHexValue = hexToByteArray(quickHexValues[index])

                    Log.i("Write Hex", "Index: $index, Data: $sendHexValue")
                    bluetoothSocket.outputStream.write(sendHexValue)
                    bluetoothSocket.outputStream.flush()
                    delay(200) // Short delay after writing


                    val bytesAvailable = bluetoothSocket.inputStream?.available() ?: 0
                    if (bytesAvailable > 0) {
                        val bytesRead = bluetoothSocket.inputStream?.read(buffer) ?: 0
                        if (bytesRead > 0) {
                            val receivedBytes = buffer.copyOf(bytesRead) // Extract only the received bytes
                            val dateFormat = SimpleDateFormat("d/M/yy HH:mm:ss", Locale.getDefault())
                            val timestamp = dateFormat.format(System.currentTimeMillis())

                            //For Panel Voltage (32)
                            if(buffer[2] == 0x32.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                            Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[0] = convertToFloat(lastByteConvert)
                            Log.i("HexRead", "TableScreen: panelVolt check, DATA: ${collectedDataMap[0]}")
                            }

                            //For Panel Current (33)
                            else if(buffer[2] == 0x33.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                            Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[1] = convertToFloat(lastByteConvert)
                            Log.i("HexRead", "TableScreen: panelCurr check, DATA: ${collectedDataMap[1]}")
                            }

                            //For Battery Voltage (34)
                            else if(buffer[2] == 0x34.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[2] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: BatteryVolt check, DATA: ${collectedDataMap[2]}")
                            }

                            //For Battery Current (35)
                            else if(buffer[2] == 0x35.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[3] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: BatteryCurr check, DATA: ${collectedDataMap[3]}")
                            }

                            //For Load Current (36)
                            else if(buffer[2] == 0x36.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[4] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: LoadCurr check, DATA: ${collectedDataMap[4]}")
                            }

                            //For Grid Current (37)
                            else if(buffer[2] == 0x37.toByte()){
                                val lastByteConvert = convertLastTwoBytesToDecimal(receivedBytes)
                                Log.i("conversion", "what is the answer: $lastByteConvert")
                                collectedDataMap[5] = convertToFloat(lastByteConvert)
                                Log.i("HexRead", "TableScreen: gridCurr check, DATA: ${collectedDataMap[5]}")
                            }

                            else if(buffer[2] == 0x38.toByte()){
                                val bitString = bytesToBits(buffer.sliceArray(3..4))
//                                Log.i("Bits Read", "TableScreen: Bits: $bitString")

                                panelVoltStat = getBitAtIndex(bitString, 2) == '1'
                                panelCapacityStat = getBitAtIndex(bitString, 3) == '1'
                                gridChargingStat = getBitAtIndex(bitString, 4) == '1'
                                batteryStat = getBitAtIndex(bitString, 5) == '1'
                                loadDetectStat = getBitAtIndex(bitString, 6) == '1'
                                loadShortStat = getBitAtIndex(bitString, 7) == '1'
                                chargingCVModeStat = getBitAtIndex(bitString, 12) == '1'
                                chargingCCModeStat = getBitAtIndex(bitString, 13) == '1'
                                loadStat = getBitAtIndex(bitString, 15) == '1'

                            }

                            if(collectedDataMap.size == 6){
                                // Adding each float as its own single-element list
                                for (i in 0 until 6) {
                                    collectedData.add(listOf(collectedDataMap[i] ?: 0.0F))
                                }
                                Log.i("CollectData", "CollectDataMap to CollectData transfer: $collectedData, Size: ${collectedData.size}")
                            }


                            if (collectedData.size == 6) { // Once all 6 pieces are collected

                                withContext(Dispatchers.Main) {
                                    tableData.add(listOf(timestamp) + collectedData.flatten().map { it.toString() })
                                    Log.i("TableData", "TableData changed: $tableData")
                                    showTableData.clear()
                                    showTableData.addAll(collectedData.flatten().map { it.toString() })
                                    Log.i("showTableData", "showTableData changed: $showTableData")
                                    collectedDataMap.clear()

                                    collectedData.clear() // Clear for the next row
                                }
                            }
                            if(index == 6){
                                index = 0
                            } else {
                                index += 1
                            }
                        }

                    }

                    delay(200) // Slight delay to prevent overloading the thread
                } catch (e: IOException){
                    Log.e("Bluetooth", "Error reading from socket: ${e.message}")
                }
            }
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .clip(RoundedCornerShape(12.dp))
            .padding(8.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(20.dp)
    ) {
        if (bluetoothSocket?.isConnected == true) {

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.LightGray),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(
                    modifier = Modifier
                        .weight(0.5f)
                        .border(1.dp, Color.Gray)
                        .background(Color.LightGray),
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp)
                            .border(
                                width = 1.dp,
                                color = Color.Gray,
                                shape = RectangleShape
                            )
                            .background(
                                color = MaterialTheme.colorScheme.secondaryContainer,
                                shape = RectangleShape
                            ),
                        contentAlignment = Alignment.Center // Centers text vertically and horizontally
                    ) {
                        Text(
                            text = "Header",
                            fontWeight = FontWeight.ExtraBold,
                            textAlign = TextAlign.Center,
                            maxLines = 1,
                            overflow = TextOverflow.Clip,
                            color = Color.Black
                        )
                    }
                }
                Column(
                    modifier = Modifier
                        .weight(0.5f)
                        .border(1.dp, Color.Gray)
                        .background(Color.LightGray),
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp)
                            .border(
                                width = 1.dp,
                                color = Color.Gray,
                                shape = RectangleShape
                            )
                            .background(
                                color = MaterialTheme.colorScheme.secondaryContainer,
                                shape = RectangleShape
                            ),
                        contentAlignment = Alignment.Center // Centers text vertically and horizontally
                    ) {
                        Text(
                            text = "DATA",
                            fontWeight = FontWeight.ExtraBold,
                            textAlign = TextAlign.Center,
                            maxLines = 1,
                            overflow = TextOverflow.Clip,
                            color = Color.Black
                        )
                    }
                }
            }
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .border(1.dp, Color.Gray)
                    .background(Color.LightGray),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(
                    modifier = Modifier
                        .weight(0.5f)
                        .border(1.dp, Color.Gray)
                        .background(Color.LightGray),

                    ) {
                    listOf("Panel Voltage(V)", "Panel Current(A)", "Battery Voltage(V)", "Battery Current(A)", "Load Current(A)", "Grid Current(A)").forEach { header ->
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(50.dp)
                                .border(
                                    width = 1.dp,
                                    color = Color.Gray,
                                    shape = RectangleShape
                                )
                                .background(
                                    color = Color(0xfffff400),
                                    shape = RectangleShape
                                ),
                            contentAlignment = Alignment.Center // Centers text vertically and horizontally
                        ) {
                            Text(
                                text = header,
                                fontWeight = FontWeight.ExtraBold,
                                textAlign = TextAlign.Center,
                                maxLines = 1,
                                overflow = TextOverflow.Clip,
                                color = Color.Black
                            )
                        }
                    }

                }
                Column(

                    modifier = Modifier
                        .weight(0.5f) // Allow the table to take up Half the space
                        .padding(top = 0.dp),
                ) {
                    showTableData.forEach { rowData ->
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(50.dp)
                                .border(
                                    width = 1.dp,
                                    color = Color.Gray,
                                    shape = RectangleShape
                                )
                                .background(
                                    color = Color(0xFF76E33E),
                                    shape = RectangleShape
                                ),
                            contentAlignment = Alignment.Center // Centers text vertically and horizontally
                        ) {
                            Text(
                                text = rowData,
                                fontWeight = FontWeight.Bold,
                                textAlign = TextAlign.Center,
                                maxLines = 1,
                                overflow = TextOverflow.Clip,
                                color = Color.Black
                            )
                        }
                    }
                }
            }
//            CircularProgressIndicator(
//                modifier = Modifier
//                    .padding(6.dp)
//                    .size(25.dp)
//            )

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .clip(RoundedCornerShape(12.dp))
                    .background(
                        Brush.verticalGradient(
                            listOf(
                                Color(0xFF0D47A1),
                                Color(0xFF42A5F5)
                            )
                        )
                    )
                    .border(
                        width = 1.dp,
                        color = Color.Black,
                        shape = RoundedCornerShape(5.dp)
                    )

                    .padding(10.dp),

                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(
                            Brush.verticalGradient(
                                listOf(
                                    Color(0xFFF8B07D),
                                    Color(0xFFF8AA63)
                                )
                        ))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.Absolute.SpaceAround,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "STATUS:",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 14.sp,
                        color = Color.Black,
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxWidth(),
                        textAlign = TextAlign.Center
                    )
                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "GRID STATUS",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                    )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (!gridChargingStat) Color(0xffff7500) else Color(
                                    0xFF76E33E
                                )
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (gridChargingStat) "ON" else "OFF",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }

                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "LOAD STATUS",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                    )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (!loadStat) Color(0xffff7500) else Color(0xFF76E33E)
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (loadStat) "ON" else "OFF",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }

                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "CV MODE",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                        )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (!chargingCVModeStat) Color(0xffff7500) else Color(
                                    0xFF76E33E
                                )
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (chargingCVModeStat) "Charging" else "NOT Charging",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }

                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "CC Mode",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                        )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (!chargingCCModeStat) Color(0xffff7500) else Color(0xFF76E33E)
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (chargingCCModeStat) "Charging" else "NOT Charging",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }
                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(
                            Brush.verticalGradient(
                            listOf(
                                Color(0xFFF8B07D),
                                Color(0xFFF8AA63)
                            )
                        ))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.Absolute.SpaceAround,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "FAULTS:",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 14.sp,
                        color = Color.Black,
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxWidth(),
                        textAlign = TextAlign.Center

                    )
                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "BATTERY",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                    )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (batteryStat) Color(0xffff7500) else Color(0xFF76E33E)
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (batteryStat) "LOW" else "NORMAL",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }

                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "PANEL VOLTAGE",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                    )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (panelVoltStat) Color(0xffff7500) else Color(0xFF76E33E)
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (panelVoltStat) "HIGH" else "LOW",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }
                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "PANEL CAPACITY",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                    )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (panelCapacityStat) Color(0xffff7500) else Color(
                                    0xFF76E33E
                                )
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (panelCapacityStat) "HIGH" else "LOW",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }

                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(60.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(standardContainerColor)
                        .shadow(1.dp, RoundedCornerShape(12.dp))
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ){
                    Text(
                        text = "LOAD",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp,
                        color = Color.Black,
                        modifier = Modifier.weight(1f),
                        textAlign = TextAlign.Center,

                        )
                    VerticalDivider(
                        thickness = 2.dp,

                    )
                    // Wrap Text in Box to center it
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .fillMaxHeight()
                            .background(
                                color = if (loadDetectStat || loadShortStat) Color(0xffff7500) else Color(
                                    0xFF76E33E
                                )
                            ),
                        contentAlignment = Alignment.Center // Center text vertically
                    ) {
                        Text(
                            text = if (loadDetectStat) "OVER LOAD" else if (loadShortStat) "SHORT CIRCUIT" else "OK",
                            fontWeight = FontWeight.ExtraBold,
                            fontSize = 12.sp,
                            color = Color.Black,
                            textAlign = TextAlign.Center,
                        )
                    }
                }

            }

        }else{
            saveTableToFile(activity, generateTableData(tableData), device)
            Column(
                modifier = Modifier
                    .padding(8.dp)
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(8.dp),
                        horizontalAlignment = Alignment.CenterHorizontally,
                    ) {
                        Text(
                            text = "Device Not connected to Bluetooth",
                            style = MaterialTheme.typography.headlineMedium,
                            textAlign = TextAlign.Center
                        )
                        Text(
                            text = "Waiting for Connection",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        CircularProgressIndicator(
                            modifier = Modifier
                                .padding(6.dp)
                                .size(25.dp)
                        )
                        Spacer(modifier = Modifier.height(10.dp))
                    }
                }

            }
        }
    }
    Spacer(modifier = Modifier.height(20.dp))
    if(bluetoothSocket?.isConnected == true){
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(4.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Button(
                onClick = {
                    saveTableToFile(activity, generateTableData(tableData), device)
                    onBack()
                },
                modifier = Modifier.padding(8.dp)
            ) {
                Text("Close")
            }
            OutlinedButton(
                onClick = {
                    onSaveComplete()
                    deleteTableSaveFile(activity, device)
                },
                modifier = Modifier.padding(8.dp)
            ) {
                Text("Clear")
            }

            Button(
                onClick = {
                    isReading = false
                    saveFileLauncher.launch("Downloaded_table_data.csv")
                    isReading = true
                },
                modifier = Modifier.padding(8.dp)
            ) {
                Text("Download")
            }
        }
    }
}

// Function to generate table data in CSV format
private fun generateTableData(tableData: List<List<String>>): String {
    val stringBuilder = StringBuilder()
    stringBuilder.append("TimeStamp, Panel Voltage(V), Panel Current(A), Battery Voltage(V), Battery Current(A), Load Current(A), Grid Current(A)\n") // Header row
    for (row in tableData) {
        stringBuilder.append(row.joinToString(", "))
        stringBuilder.append("\n")
    }
    return stringBuilder.toString()
}

@SuppressLint("MissingPermission")
private fun saveDataToFile(uri: Uri, data: String, activity: Activity, device: BluetoothDevice, onSaveComplete: () -> Unit) {
    try {
        activity.contentResolver.openOutputStream(uri)?.use { outputStream ->
            OutputStreamWriter(outputStream).use { writer ->
                writer.write(data)
            }
            Toast.makeText(activity, "DataTable Downloaded", Toast.LENGTH_LONG).show()
            deleteTableSaveFile(activity, device)
            onSaveComplete()
        }
    } catch (e: Exception) {
        e.printStackTrace()
        Toast.makeText(activity, "Failed to save File: $e", Toast.LENGTH_LONG).show()
    }
}

@SuppressLint("MissingPermission")
private fun deleteTableSaveFile(activity: Activity, device: BluetoothDevice){
    // Delete the file after successful save
    val file = activity.getFileStreamPath("${device.name}_LIVE_table_data.csv")
    if (file.exists()) {
        file.delete()
//        Toast.makeText(activity, "Local file Erased", Toast.LENGTH_SHORT).show()
    }
}

@SuppressLint("MissingPermission")
private fun saveTableToFile(activity: Activity, data: String, device: BluetoothDevice) {
    try {
        activity.openFileOutput("${device.name}_LIVE_table_data.csv", Activity.MODE_PRIVATE).use { outputStream ->
            outputStream.write(data.toByteArray(Charsets.UTF_8))
        }
        Toast.makeText(activity, "Table saved successfully", Toast.LENGTH_SHORT).show()

    } catch (e: Exception) {
        e.printStackTrace()
        Toast.makeText(activity, "Failed to save table: $e", Toast.LENGTH_LONG).show()
        Log.e("SaveTableError", "saveTableToFile: Failed to save table: $e")
    }
}

@SuppressLint("MissingPermission")
private fun loadTableFromFile(activity: Activity, device: BluetoothDevice): List<List<String>> {
    val savedData = mutableListOf<List<String>>()
    try {
        val file = activity.getFileStreamPath("${device.name}_LIVE_table_data.csv")
        if (!file.exists()) {
            Log.w("FileRead", "File does not exist. Returning empty table.")
            return emptyList() // Prevent error when file is missing
        }

        val fileInputStream = activity.openFileInput("${device.name}_LIVE_table_data.csv")
        val data = fileInputStream.bufferedReader().use { it.readLines() }

        for (row in data.drop(1)) { // Drop the header row
//            savedData.add(row.split(", "))
            val splitRow = row.split(",").map { it.trim() } // Trim to remove leading/trailing spaces
            Log.d("Debug", "Row: $row, Split: $splitRow")
            // Ensure all fields are valid, preventing NumberFormatException
            if (splitRow.size == 6 && splitRow.all { it.isNotEmpty() }) {
                savedData.add(splitRow)
            } else {
                Log.e("DataError", "Malformed row detected: $row")
            }
        }
    } catch (e: Exception) {
        e.printStackTrace()
        Log.e("LoadTableError", "Failed to load table: ${e.message}")
    }
    return savedData
}
